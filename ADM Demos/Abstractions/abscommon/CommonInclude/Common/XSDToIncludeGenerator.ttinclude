<#+ 
	void GenerateXSDSerializer(string templateFile, string outputDirectory, bool generateNamespace, bool generateT4Tags,
		bool generateToTemplateOutput)
	{
            string xsdExeFileName = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) +
                                 @"\Microsoft SDKs\Windows\v7.0A\bin\xsd.exe";
			string xsdFile = GetXSDFile(templateFile);
			string outputClassFile = outputDirectory + "\\" + System.IO.Path.GetFileNameWithoutExtension(templateFile) + ".cs";
			string namespaceFileTag = generateNamespace ? "_namespace" : "";
			string outputttinclude = outputDirectory + "\\" + System.IO.Path.GetFileNameWithoutExtension(templateFile) + namespaceFileTag +  ".ttinclude";
			string outputCsCode = outputDirectory + "\\" + System.IO.Path.GetFileNameWithoutExtension(templateFile) + namespaceFileTag +  ".cs";
			string xsdParameters = "/c \"" + xsdFile + "\" /o:\"" + outputDirectory + "\"";
			string namespaceName = System.IO.Path.GetFileNameWithoutExtension(templateFile);
			if(generateNamespace == true && generateT4Tags == false)
			{
				xsdParameters = "/n:" + namespaceName + " " + xsdParameters;
			}
            System.Diagnostics.ProcessStartInfo processStartInfo = new System.Diagnostics.ProcessStartInfo(xsdExeFileName, xsdParameters);
			WriteLog("Starting xsd.exe: " + xsdParameters);
			System.Diagnostics.Process proc = System.Diagnostics.Process.Start(processStartInfo);
			proc.WaitForExit();
			WriteLog("System.Diagnostics.Processing include tags...");
			string content = System.IO.File.ReadAllText(outputClassFile);
			System.IO.File.Delete(outputClassFile);
			string outputFile;
			if(generateT4Tags)
			{
				if(generateNamespace) {
					content = "<" + "#+" + 
						System.Environment.NewLine + "public class " + namespaceName + " { "  + System.Environment.NewLine + 
						content.Replace("using System.Xml.Serialization;", "") + "} " + "#" + ">";
				} else {
					content = "<" + "#+" + 
						System.Environment.NewLine + 
						content.Replace("using System.Xml.Serialization;", "") + "#" + ">";
				}
				outputFile = outputttinclude;
			} else
				outputFile = outputCsCode;
			if(generateToTemplateOutput) {
				this.GenerationEnvironment.Clear();
				this.GenerationEnvironment.Append(content);
			} else {
				WriteLog("Writing to file: " + outputFile);
				System.IO.File.WriteAllText(outputFile, content);
			}
	}
	
	string GetXSDFile(string templateFile)
	{
		string directory = System.IO.Path.GetDirectoryName(templateFile);
		string xsdFile = directory + "\\" + System.IO.Path.GetFileNameWithoutExtension(templateFile) + ".xsd";
		return xsdFile;
	}

	void GenerateTTInclude(string templateFile, string outputDirectory, bool generateNamespace = false, bool generateT4Tags = true,
		bool generateToTemplateOutput = false) {
		GenerateXSDSerializer(templateFile, outputDirectory, generateNamespace, generateT4Tags, generateToTemplateOutput);
	}
	
	void GenerateTTInclude(string templateFile, bool generateNamespace = false) {
		GenerateTTInclude(templateFile, System.IO.Path.GetDirectoryName(templateFile), generateNamespace);
	}

	void WriteLog(string entry) {
		#><#= entry + System.Environment.NewLine #><#+ 
	}

#>