<#@ template debug="true" hostSpecific="true" language="C#v3.5" #>
<#@ output extension=".doc" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="..\Common\CommonCodeblocks.ttinclude" #>
<#@ include file="PowerPointAddIn_v1_0.ttinclude" #>

<html>

<#   
	string templateDirectoryName = Path.GetDirectoryName(Host.TemplateFile);
	string directoryName = templateDirectoryName + @"\Content_v1_0";
	string[] xmlFileNames = Directory.GetFiles(directoryName, "*.xml");
	
	GenerateHeadWithStyle();
	GenerateBodyStart();

	foreach(string xmlFileName in xmlFileNames)
	{
		PowerPointAddIn_v1_0.PowerPointAddInAbstraction abstraction = LoadXml<PowerPointAddIn_v1_0.PowerPointAddInAbstraction>(xmlFileName);
		GenerateBody(abstraction);
	}
	
	GenerateBodyEnd();

#>

</html>
<#+ 
	void GenerateBody(PowerPointAddIn_v1_0.PowerPointAddInAbstraction abstraction)
	{
		GenerateTitle(abstraction.PowerPointAddIn);
		GenerateTOC(abstraction.PowerPointAddIn);
		GenerateAddIn(abstraction.PowerPointAddIn);
	}

	void GenerateTitle(PowerPointAddIn_v1_0.PowerPointAddInType addIn)
	{
		#>
<div style='border:none;border-bottom:solid #4F81BD 1.0pt;padding:0cm 0cm 4.0pt 0cm'>
<p class=MsoTitle>PowerPoint Add-In: <#= addIn.title #></p>
</div>
<h1><span lang=EN-US>Overview</span></h1>
<p class=MsoNormal><#= addIn.designDocumentation #></p>
		
		<#+
	}
	
	void GenerateTOC(PowerPointAddIn_v1_0.PowerPointAddInType addIn)
	{
		// TODO: Create TOC with references to names
		#>
		<p>... Manually insert TOC in Word here ...</p>
		<#+
	}

	
	void GenerateAddIn(PowerPointAddIn_v1_0.PowerPointAddInType addIn)
	{
		GenerateOptions(addIn.Options);
		GenerateUserInterface(addIn.UserInterface);
		GenerateCommands(addIn.Commands);
		GenerateEvents(addIn.Events);
	}
	
	void GenerateOptions(PowerPointAddIn_v1_0.OptionsType options)
	{
		string userSpecificConfigStr = options.userSpecificConfig ? "Contains user specific config." : "No user specific config.";
		#>
<h1><a name="_options"><span lang=EN-US>Options</span></a></h1>
<p class=MsoNormal><#= userSpecificConfigStr #></p>
		
		<#+
	}
	
	void GenerateUserInterface(PowerPointAddIn_v1_0.UserInterfaceType userInterface)
	{
		if(userInterface.RibbonBar == null)
			return;
		var tab = userInterface.RibbonBar.Tab;
		#>
<h1><a name="_ribbonBar"><span lang=EN-US>Ribbon Bar UI - <#= tab.label  #> (<#= tab.name #>)</span></a></h1>
		<#+
		foreach(var controlGroup in tab.ControlGroup)
			GenerateControlGroup(controlGroup);
	}
	
	void GenerateControlGroup(PowerPointAddIn_v1_0.ControlGroupType controlGroup)
	{
		#>
<h2><a name="_controlGroup_<#= controlGroup.name #>"><span lang=EN-US>Control Group - <#= controlGroup.label  #> (<#= controlGroup.name #>)</span></a></h2>
<p class=MsoNormal><#= controlGroup.designDocumentation #></p>
		<#+
		foreach(var item in controlGroup.Items)
			GenerateControl(item);
	}
	
	void GenerateControl(object item)
	{
		var button = item as PowerPointAddIn_v1_0.ButtonType;
		var checkBox = item as PowerPointAddIn_v1_0.CheckBoxType;
		if(button != null)
			GenerateButton(button);
		if(checkBox != null)
			GenerateCheckBox(checkBox);
	}
	
	void GenerateButton(PowerPointAddIn_v1_0.ButtonType button)
	{
		string iconString = button.officeGalleryIconSpecified ? button.officeGalleryIcon.ToString() : "";
		#>
<h3><a name="_button_<#= button.name #>"><span lang=EN-US>Button - <#= button.label  #> (<#= button.name #>)</span></a></h3>
<p class=MsoNormal><b>Executes:</b> <#= button.commandOnClick #></p>
<p class=MsoNormal><b>Office Icon:</b> <#= iconString #></p>
<p class=MsoNormal><b>Size:</b> <#= button.size.ToString() #></p>
<p class=MsoNormal><#= button.designDocumentation #></p>
		<#+
	}

	
	void GenerateCheckBox(PowerPointAddIn_v1_0.CheckBoxType checkBox)
	{
		#>
<h3><a name="_checkBox_<#= checkBox.name #>"><span lang=EN-US>CheckBox - <#= checkBox.label #> (<#= checkBox.name #>)</span></a></h3>
<p class=MsoNormal><b>Initial State:</b> <#= checkBox.initialCheckedState.ToString() #></p>
<p class=MsoNormal><b>Enabled State:</b> <#= checkBox.isEnabled.ToString() #></p>
<p class=MsoNormal><#= checkBox.designDocumentation #></p>
		<#+
	}
	
	
	void GenerateCommands(PowerPointAddIn_v1_0.CommandType[] commands)
	{
		#>
<h1><a name="_commands"><span lang=EN-US>Commands</span></a></h1>
		<#+
		foreach(var command in commands)
			GenerateCommand(command);
	}
	
	void GenerateCommand(PowerPointAddIn_v1_0.CommandType command)
	{
		#>
<h2><a name="_command_<#= command.name #>"><span lang=EN-US><#= command.name #></span></a></h2>
<p class=MsoNormal><#= command.designDocumentation #></p>
		
		<#+
	}
	
	void GenerateEvents(PowerPointAddIn_v1_0.EventType[] events)
	{
		#>
<h1><a name="_events"><span lang=EN-US>Events</span></a></h1>
		<#+
		foreach(var eventItem in events)
			GenerateEvent(eventItem);
	}
	
	void GenerateEvent(PowerPointAddIn_v1_0.EventType eventItem)
	{
		#>
<h2><a name="_event_<#= eventItem.name #>"><span lang=EN-US><#= eventItem.name #></span></a></h2>
<p class=MsoNormal><b>PowerPoint Event:</b> <#= eventItem.powerPointEvent.ToString() #></p>
<p class=MsoNormal><#= eventItem.designDocumentation #></p>
		
		<#+
	}
	
		
	void GenerateBodyStart()
	{
		#>
<body lang=EN link=blue vlink=purple>

<div class=WordSection1>

		
		<#+
	}

	void GenerateBodyEnd()
	{
		#>
</div>

</body>
		
		<#+
		
	}
	
	void GenerateHeadWithStyle()
	{
		#>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 14 (filtered)">

<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:10.0pt;
	margin-left:0cm;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:24.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Cambria","serif";
	color:#365F91;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:10.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-top:10.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:0cm;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:11.0pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:22.0pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{mso-style-link:"Title Char";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:15.0pt;
	margin-left:0cm;
	border:none;
	padding:0cm;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.MsoTitleCxSpFirst, li.MsoTitleCxSpFirst, div.MsoTitleCxSpFirst
	{mso-style-link:"Title Char";
	margin:0cm;
	margin-bottom:.0001pt;
	border:none;
	padding:0cm;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.MsoTitleCxSpMiddle, li.MsoTitleCxSpMiddle, div.MsoTitleCxSpMiddle
	{mso-style-link:"Title Char";
	margin:0cm;
	margin-bottom:.0001pt;
	border:none;
	padding:0cm;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.MsoTitleCxSpLast, li.MsoTitleCxSpLast, div.MsoTitleCxSpLast
	{mso-style-link:"Title Char";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:15.0pt;
	margin-left:0cm;
	border:none;
	padding:0cm;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{mso-style-link:"Balloon Text Char";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:8.0pt;
	font-family:"Tahoma","sans-serif";}
p.MsoTocHeading, li.MsoTocHeading, div.MsoTocHeading
	{margin-top:24.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
span.TitleChar
	{mso-style-name:"Title Char";
	mso-style-link:Title;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
span.BalloonTextChar
	{mso-style-name:"Balloon Text Char";
	mso-style-link:"Balloon Text";
	font-family:"Tahoma","sans-serif";}
.MsoChpDefault
	{font-family:"Calibri","sans-serif";}
.MsoPapDefault
	{margin-bottom:10.0pt;
	line-height:115%;}
@page WordSection1
	{size:595.3pt 841.9pt;
	margin:70.85pt 2.0cm 70.85pt 2.0cm;}
div.WordSection1
	{page:WordSection1;}
-->
</style>

</head>
		<#+
	}
#>